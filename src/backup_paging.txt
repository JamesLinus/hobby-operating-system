#include "paging.h"

void* align(void* addr){
	return (void*)( (unsigned int)addr & (~0xFFF));
}

void map_range(char* str,void* start,void* end){
	kprintf("MAPPING [%s] %x to %x\n",str,start,end);
	while (start<=end){
		map_page(kernel_context->pagedir,start,start);
		start+=0x1000;
	}
}

void init_paging(){
	paging_enabled = false;
	kernel_context = create_context();
	/*void *start = align(0x00);
	void* end = align(0x10000000);
	map_range(start,end);
	*/
	void* start = gdt_entry_start;
	void* end = gdt_entry_end;
	int j = 0;
	start = align(start);
	end = align(end);
	end+=0x1000;
	map_range("GDT",start,end);
	
	start = 0x100000;
	end =&kernel_end;
	map_range(start,end);
	
	start =idt_entry_start-0x1000;
	end  = idt_entry_end;
	start = align(start);
	end = align(end);
	end+=0x1000;
	map_range("IDT",start,end);
	
	start = (kernel_stack-0x10000);
	end =(kernel_stack);
	start = align(start);
	end = align(end);
	end+=0x1000;
	//map_range(start,end);
	
	start = (void*)0xB8000;
	end =(void*)(0xB8000+(25*80*2/0x1000));
	start = align(start);
	end = align(end);
	end+=0x1000;
	map_range("Video",start,end);
	
	start = 0x000;
	end =(void*)(0x400000);
	start = align(start);
	end = align(end);
	map_range("first 4MB",start,end);

	kprintf("\n");
	kDebug(true);
	map_page("kernel-PD",kernel_context->pagedir,0x3fcff000,kernel_context->pagedir);
	kDebug(false);
	
	heap = (node*)pmm_alloc();
	//map_page(0x401000,(unsigned int*)heap,(unsigned int*)heap);
	activate_context(kernel_context);
    	
	unsigned int cr0;
	__asm__ volatile("mov %%cr0, %0" : "=b" (cr0));
	cr0 |= 0x80000000;
	__asm__ volatile("mov %0, %%cr0" : : "b" (cr0));

	/*kDebug(true);
	map_page(0x3fcff000,(void*)0x2000,(void*)0x2000);
	kDebug(false);
	paging_enabled = true;*/
	
}

int map_page(unsigned long* pagedir,void* virt, void* phys) {
	unsigned int page_index = (unsigned int)virt / 0x1000;
	unsigned int pd_index = page_index / 1024;
	unsigned int pt_index = page_index % 1024;
	
	if (kIsDebug()){
		kprintf("mapping virt=%x phys=%x pd=%x pd=%d pt=%d ",virt,phys,pagedir,pd_index,pt_index);
	}
	
	if (((unsigned int)virt & 0xFFF) || ((unsigned int)phys & 0xFFF)) {
		return -1;
	}
	if (kIsDebug()) kprintf("A\n");
	bool created = false;
	unsigned int *page_table;
	if (kIsDebug()){
		kprintf("\taccessing pd=%x idx=%d\n",pagedir,pd_index);
	}
	if ((pagedir[pd_index] & 0x1)==0) {
		page_table = (unsigned int*) (pagedir[pd_index] & ~0xFFF);
	} else {
		//page_table =pagedir+pd_index*0x1000;
		page_table =pmm_alloc();
		if (kIsDebug()) 
			kprintf("\tNewPT phys=%x pd-entry=%x ",page_table,&pagedir[pd_index]);
		pagedir[pd_index] = (unsigned int)page_table | 0x3;
		page_table = (unsigned int*) (unsigned int)(0x3fc00000+pd_index*0x1000) ;//& ~0xFFF);
		if (kIsDebug()) 
			kprintf("virt=%x\n",page_table);
		__asm__ volatile("invlpg %0" : : "m" (*(char*)page_table));
		
		for (unsigned int i = 0; i < 1024; i++) {
			page_table[i] = 0;
		}
		//pagedir[pd_index] = (unsigned int) page_table |( 0x3);
		
	}
	if (kIsDebug()) kprintf("\t* entering phys=%x at pt=%x\n",phys,page_table);
	page_table[pt_index] = (unsigned int) phys | 0x3;
	__asm__ volatile("invlpg %0" : : "m" (*(char*)virt));
	return 0;
}

void activate_context(context* ctx) {
	__asm__  volatile("mov %0, %%cr3" : : "r" (ctx->pagedir));
	kprintf("active context with (phys) PD=%x\n",ctx->pagedir);
}

context* create_context() {
	context* ctx = pmm_alloc();
    ctx->pagedir = pmm_alloc();
    for (unsigned int i = 0; i < 1024; i++) {
        ctx->pagedir[i] = 0;
    }

    return ctx;
}
